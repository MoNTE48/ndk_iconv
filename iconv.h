/*
 * Copyright (C) 2018 The Android Open Source Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * https://github.com/rrrfff/ndk_iconv
 */

#ifndef NDK_ANDROID_SUPPORT_ICONV_H
#define NDK_ANDROID_SUPPORT_ICONV_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stddef.h>

typedef void *iconv_t;

iconv_t iconv_open(const char *to, const char *from);

size_t iconv(iconv_t, char **inp, size_t *, char **outp, size_t *);

int iconv_close(iconv_t);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // NDK_ANDROID_SUPPORT_ICONV_H


#include <errno.h>
#include <wchar.h>
#include <string.h>
#include <stdlib.h>
#include <limits.h>
#include <stdint.h>

#define UTF_32BE    0300
#define UTF_32LE    0303
#define WCHAR_T     0306
#define US_ASCII    0307
#define UTF_8       0310

/* Definitions of charmaps. Each charmap consists of:
 * 1. Empty-string-terminated list of null-terminated aliases.
 * 2. Special type code or number of elided entries.
 * 3. Character table (size determined by field 2). */

static const unsigned char charmaps[] = {
	"utf8\0\0\310"
	"wchart\0\0\306"
	"ucs2\0ucs2be\0\0\304"
	"ucs2le\0\0\305"
	"utf16\0utf16be\0\0\302"
	"utf16le\0\0\301"
	"ucs4\0ucs4be\0utf32\0utf32be\0\0\300"
	"ucs4le\0utf32le\0\0\303"
	"ascii\0usascii\0iso646\0iso646us\0\0\307"
	"eucjp\0\0\320"
	"shiftjis\0sjis\0\0\321"
	"gb18030\0\0\330"
	"gbk\0\0\331"
	"gb2312\0\0\332"
	"big5\0bigfive\0cp950\0big5hkscs\0\0\340"
	"euckr\0ksc5601\0ksx1001\0cp949\0\0\350"

	"iso88591\0"
	"latin1\0"
	"\0\200"

	"iso88592\0"
	"\0\40"
	"\0\330\20\313\32\0\244\21\10\0\0\34\122\310\42\240\0\100\212\50\0\334\60\13\33"
	"\0\250\41\10\54\0\40\142\10\43\241\324\122\312\50\173\0\0\0\15\0\224\201\3\0"
	"\76\0\200\4\0\112\0\0\0\20\102\264\21\7\0\0\334\1\0\0\177\124\2\300\45"
	"\0\0\220\10\0\174\0\0\100\15\0\230\221\3\0\77\0\220\4\0\113\0\0\100\20"
	"\103\270\41\7\0\0\340\1\0\0\200\130\2\0\46\0\0\240\210\54"

	"iso88593\0"
	"\0\40"
	"\0\130\21\13\0\0\4\100\5\0\0\170\121\210\23\140\0\20\200\50\0\134\1\0\0"
	"\0\0\120\5\0\0\174\141\310\23\141\0\20\300\50\0\0\0\100\0\0\360\240\3\0"
	"\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\100\1\0\0\114\0\0\0\0\0\114\62\10\0"
	"\0\0\0\100\0\0\364\260\3\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\104\1\0\0"
	"\115\0\0\0\0\0\120\102\210\54"

	"iso88594\0"
	"\0\40"
	"\0\330\100\106\37\0\140\161\6\0\0\34\102\204\24\215\0\100\12\0\0\334\60\213\37"
	"\0\144\201\6\54\0\40\122\304\24\216\314\121\12\35\62\0\0\0\0\0\0\0\0\27"
	"\76\0\200\4\0\106\0\0\200\26\102\274\121\207\30\0\0\0\0\0\0\144\2\0\0"
	"\0\74\22\11\0\63\0\0\0\0\0\0\0\100\27\77\0\220\4\0\107\0\0\300\26"
	"\103\300\141\307\30\0\0\0\0\0\0\150\2\0\0\0\100\42\211\54"

	"iso88595\0"
	"\0\40"
	"\0\14\104\120\101\6\35\204\120\102\12\55\304\120\103\16\1\360\20\104"
	"\21\111\64\21\105\25\131\164\21\106\31\151\264\21\107\35\171\364\21\110"
	"\41\211\64\22\111\45\231\164\22\112\51\251\264\22\113\55\271\364\22\114"
	"\61\311\64\23\115\65\331\164\23\116\71\351\264\23\117\75\371\364\23\120"
	"\101\11\65\24\121\105\31\165\24\122\111\51\265\24\123\115\71\365\24\124"
	"\127\106\45\325\124\124\125\145\325\125\130\145\245\325\126\134\15\320\225\127"

	"iso88596\0"
	"\0\40"
	"\0\4\20\100\0\0\4\20\100\0\1\4\20\100\0\224\1\20\100\0\1\4\20\100\0"
	"\1\4\20\100\0\1\4\20\100\145\1\4\20\200\145\1\134\206\131\146"
	"\232\155\306\131\147\236\175\6\132\150\242\215\106\132\151\246\235\206\132\152"
	"\252\255\306\132\153\256\275\6\133\0\1\4\20\100\0\261\311\66\33\155"
	"\265\331\166\33\156\271\351\266\33\157\275\371\366\33\160\301\11\67\134\0"
	"\1\4\20\100\0\1\4\20\100\0\1\4\20\100\0"

	"iso88597\0"
	"\0\40"
	"\0\24\151\44\0\124\126\11\0\0\0\0\260\13\0\0\0\20\300\220\0\0\0\0\0"
	"\274\364\342\13\0\277\0\23\14\0\302\0\60\14\61\305\30\163\14\62"
	"\311\50\263\14\63\315\70\363\14\64\321\110\63\15\65\325\130\23\300\65"
	"\330\144\243\315\66\334\164\343\315\67\340\204\43\316\70\344\224\143\316\71"
	"\350\244\243\316\72\354\264\343\316\73\360\304\43\317\74\364\324\143\317\75"
	"\370\344\243\317\76\374\364\343\317\77\0\5\44\120\0"

	"iso88598\0"
	"\0\40"
	"\0\4\0\0\0\0\0\0\0\0\0\0\300\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\360\0\0"
	"\0\0\0\100\0\1\4\20\100\0\1\4\20\100\0\1\4\20\100\0\1\4\20\100\0\1\4\20\100\0"
	"\1\4\20\100\0\1\4\20\100\0\1\4\20\0\221\164\325\145\327\135"
	"\170\345\245\327\136\174\365\345\327\137\200\5\46\330\140\204\25\146\330\141"
	"\210\45\246\330\142\214\65\346\130\0\1\374\10\144\0"

	"iso88599\0"
	"\0\120"
	"\116\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\170\121\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\117\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\174\141\10\0"

	"iso885910\0"
	"\0\40"
	"\0\330\100\204\24\132\140\41\6\0\147\10\161\110\43\244\0\20\311\34"
	"\0\334\120\304\24\133\144\61\6\0\150\14\201\210\43\245\14\51\11\35\62\0\0\0\0"
	"\0\0\0\0\27\76\0\200\4\0\106\0\0\0\0\0\274\121\7\0\0\0\0\300\43\0\144\2\0\0"
	"\0\0\0\0\0\63\0\0\0\0\0\0\0\100\27\77\0\220\4\0\107\0\0\0\0\0\300\141\7\0"
	"\0\0\0\0\44\0\150\2\0\0\0\0\0\0\31"

	"iso885911\0"
	"tis620\0"
	"\0\40"
	"\0\100\27\235\164\323\121\127\235\165\327\141\227\235\166\333\161\327\235\167"
	"\337\201\27\236\170\343\221\127\236\171\347\241\227\236\172"
	"\353\261\327\236\173\357\301\27\237\174\363\321\127\237\175"
	"\367\341\227\237\176\373\361\327\237\177\377\1\30\240\200\3\22\130\240\201"
	"\7\42\230\140\0\1\4\20\200\202\13\62\330\240\203\17\102\30\241\204"
	"\23\122\130\241\205\27\142\230\241\206\33\162\330\241\207\37\202\30\242\210"
	"\43\222\130\242\211\1\4\20\100\0"

	"iso885913\0"
	"\0\40"
	"\0\44\11\0\0\0\50\11\0\0\15\0\320\7\0\0\0\0\300\2\0\0\0\0\0\110\2\0\0\0"
	"\20\0\340\7\0\0\0\0\200\3\66\160\41\3\16\0\0\200\4\21\76\0\0\212\21"
	"\122\210\241\305\31\207\264\361\6\0\165\0\0\0\0\231\254\21\110\44"
	"\0\210\102\12\0\67\164\61\103\16\0\0\220\104\21\77\0\20\312\21"
	"\123\214\261\5\32\210\270\1\7\0\166\0\0\0\0\232\260\41\210\44"
	"\0\214\122\212\221"

	"iso885914\0"
	"\0\40"
	"\0\234\210\42\0\74\364\220\42\0\65\2\160\243\212\73\2\0\300\47"
	"\53\262\10\105\24\55\272\10\300\213\66\302\210\143\214\74\346\250\243\214"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\233\0\0\0\0\0\0\0\300\214\0\0\0\0\0"
	"\0\0\320\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\234\0\0\0\0\0\0\0\0\215"
	"\0\0\0\0\0\0\0\340\11\0"

	"iso885915\0"
	"latin9\0"
	"\0\44"
	"\124\2\160\10\0\210\0\0\0\0\0\0\0\0\0\0\0\0\0\0\244\0\0\0\0\245\0\0\0\0"
	"\171\350\361\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"

	"iso885916\0"
	"\0\40"
	"\0\330\160\303\32\124\52\171\10\0\210\0\260\12\0\240\0\20\212\50\0\0\340\3\33"
	"\244\44\11\0\0\245\374\300\12\0\171\350\361\311\50\0\0\0\0\15\0\340\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\102\264\1\0\0\0\334\1\100\40\227\0\0\0\0\0\40\321\12\0"
	"\0\0\0\100\15\0\344\0\0\0\0\0\0\0\0\0\0\0\0\0\103\270\1\0\0\0\340\1\200\40"
	"\230\0\0\0\0\0\44\341\12\0"

	"cp1250\0"
	"windows1250\0"
	"\0\0"
	"\124\6\160\144\0\112\72\271\44\223\1\74\171\10\224\201\54\102\12\50"
	"\1\24\151\44\222\111\66\31\244\220\1\140\211\110\224\202\60\122\112\50"
	"\0\300\22\313\32\0\330\0\0\0\0\0\120\10\0\0\0\0\200\50\0\0\60\13\33\0\0\0\0\0"
	"\0\334\140\10\0\151\324\242\306\50\173\0\0\0\15\0\224\201\3\0\76\0\200\4\0"
	"\112\0\0\0\20\102\264\21\7\0\0\334\1\0\0\177\124\2\300\45\0\0\220\10\0"
	"\174\0\0\100\15\0\230\221\3\0\77\0\220\4\0\113\0\0\100\20\103\270\41\7\0"
	"\0\340\1\0\0\200\130\2\0\46\0\0\240\210\54"

	"cp1251\0"
	"windows1251\0"
	"\0\0"
	"\4\25\164\344\124\112\72\271\44\223\124\76\271\20\224\14\71\324\20\104"
	"\122\25\151\44\222\111\66\31\244\220\1\140\231\125\224\132\161\265\225\127"
	"\0\74\324\225\102\0\174\5\0\0\3\1\140\20\0\0\0\0\100\102\0\0\200\220\125"
	"\140\1\0\0\0\121\135\111\25\0\130\35\124\325\125\21\111\64\21\105"
	"\25\131\164\21\106\31\151\264\21\107\35\171\364\21\110\41\211\64\22\111"
	"\45\231\164\22\112\51\251\264\22\113\55\271\364\22\114\61\311\64\23\115"
	"\65\331\164\23\116\71\351\264\23\117\75\371\364\23\120\101\11\65\24\121"
	"\105\31\165\24\122\111\51\265\24\123\115\71\365\24\124"

	"cp1252\0"
	"windows1252\0"
	"\0\0"
	"\124\6\160\244\51\112\72\271\44\223\257\74\171\10\224\171\4\100\112\0"
	"\1\24\151\44\222\111\66\31\244\220\264\140\211\110\224\172\4\120\312\47"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"

	"cp1253\0"
	"windows1253\0"
	"\0\0"
	"\124\6\160\244\51\112\72\271\44\223\1\74\31\0\224\1\4\20\100\0\1\24\151\44\222"
	"\111\66\31\244\220\1\140\31\100\224\1\4\20\100\0\0\364\342\13\0\0\0\0\0\0"
	"\0\0\20\0\0\0\0\0\300\220\0\0\0\0\0\274\0\0\0\0\277\0\23\14\0\302\0\60\14\61"
	"\305\30\163\14\62\311\50\263\14\63\315\70\363\14\64\321\110\63\15\65"
	"\325\130\23\300\65\330\144\243\315\66\334\164\343\315\67\340\204\43\316\70"
	"\344\224\143\316\71\350\244\243\316\72\354\264\343\316\73\360\304\43\317\74"
	"\364\324\143\317\75\370\344\243\317\76\374\364\343\317\77\0\5\44\120\0"

	"cp1254\0"
	"windows1254\0"
	"\0\0"
	"\124\6\160\244\51\112\72\271\44\223\257\74\171\10\224\171\4\20\100\0"
	"\1\24\151\44\222\111\66\31\244\220\264\140\211\110\224\172\4\20\300\47"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\116\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\170\121\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\117\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\0\0\174\141\10\0"

	"cp1255\0"
	"windows1255\0"
	"\0\0"
	"\124\6\160\244\51\112\72\271\44\223\257\74\31\0\224\1\4\20\100\0"
	"\1\24\151\44\222\111\66\31\244\220\264\140\31\100\224\1\4\20\100\0\0\0\0\0\0"
	"\122\2\0\0\0\0\0\300\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\360\0\0\0\0\0\0\0"
	"\141\211\65\26\131\145\231\165\26\132\151\251\25\300\132\154\265\345\326\133"
	"\160\305\45\327\134\217\101\26\231\144\223\5\20\100\0\1\4\20\100\0"
	"\164\325\145\327\135\170\345\245\327\136\174\365\345\327\137\200\5\46\330\140"
	"\204\25\146\330\141\210\45\246\330\142\214\65\346\130\0\1\374\10\144\0"

	"cp1256\0"
	"windows1256\0"
	"\0\0"
	"\124\26\167\244\51\112\72\271\44\223\257\74\111\34\224\171\30\227\334\161"
	"\313\25\151\44\222\111\66\31\244\220\312\141\211\134\224\172\364\350\43\163"
	"\0\120\6\0\0\0\0\0\0\0\0\0\320\34\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\120\31\0"
	"\0\0\0\200\145\316\135\206\131\146\232\155\306\131\147\236\175\6\132\150"
	"\242\215\106\132\151\246\235\206\132\152\252\255\306\32\0\255\271\366\32\154"
	"\261\311\66\33\155\0\324\6\200\155\267\341\226\33\0\0\0\0\0\0\272\355\6\0\0"
	"\274\365\346\333\157\0\0\27\34\0\302\1\60\34\0\0\374\10\344\163"

	"cp1257\0"
	"windows1257\0"
	"\0\0"
	"\124\6\160\144\0\112\72\271\44\223\1\74\31\0\224\1\20\0\213\2\1\24\151\44\222"
	"\111\66\31\244\220\1\140\31\100\224\1\30\60\113\0\0\4\0\0\0\0\4\0\0\0"
	"\15\0\320\7\0\0\0\0\300\2\0\0\0\0\0\0\0\0\0\0\20\0\340\7\0\0\0\0\200\3"
	"\66\160\41\3\16\0\0\200\4\21\76\0\0\212\21\122\210\241\305\31\207\264\361\6\0"
	"\165\0\0\0\0\231\254\21\110\44\0\210\102\12\0\67\164\61\103\16\0\0\220\104\21"
	"\77\0\20\312\21\123\214\261\5\32\210\270\1\7\0\166\0\0\0\0\232\260\41\210\44"
	"\0\214\122\212\54"

	"cp1258\0"
	"windows1258\0"
	"\0\0"
	"\124\6\160\244\51\112\72\271\44\223\257\74\31\0\224\171\4\20\100\0"
	"\1\24\151\44\222\111\66\31\244\220\264\140\31\100\224\172\4\20\300\47"
	"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
	"\0\0\0\0\0\0\0\0\0\15\0\0\0\0\0\0\0\0\0\0\266\0\0\0\0\102\0\220\13\0"
	"\0\234\2\0\0\0\0\0\0\0\0\244\202\13\0\0\0\0\100\15\0\0\0\0\0\0\0\0\0\0"
	"\267\0\0\0\0\103\0\240\13\0\0\240\2\0\0\0\0\0\0\0\0\250\62\45\0"

	"koi8r\0"
	"\0\0"
	"\140\206\51\346\230\144\226\151\346\231\150\246\251\46\242\211\52\272\50\243"
	"\215\72\372\250\227\220\146\251\345\226\134\166\51\300\227\7\40\220\300\3"
	"\153\262\331\146\124\156\276\11\147\234\162\316\111\147\235"
	"\166\336\211\147\236\172\356\311\347\100\175\372\371\47\240\201\12\72\50\241"
	"\205\32\172\150\1\117\305\44\323\121\65\331\124\24\115\106\345\244\323\116"
	"\74\365\344\323\117\100\101\25\224\120\103\21\165\323\114\115\61\205\123\122"
	"\116\51\205\324\122\57\105\44\321\111\25\131\124\22\105\46\145\244\321\106"
	"\34\165\344\321\107\40\301\24\222\110\43\221\164\321\104\55\261\204\121\112"
	"\56\251\204\322\112"

	"koi8u\0"
	"\0\0"
	"\140\206\51\346\230\144\226\151\346\231\150\246\251\46\242\211\52\272\50\243"
	"\215\72\372\250\227\220\146\251\345\226\134\166\51\300\227\7\40\220\300\3"
	"\153\262\331\146\124\124\275\151\325\125\162\316\111\147\235"
	"\166\202\205\147\236\172\356\311\347\100\6\371\211\120\102\201\12\72\50\241"
	"\205\176\165\150\1\117\305\44\323\121\65\331\124\24\115\106\345\244\323\116"
	"\74\365\344\323\117\100\101\25\224\120\103\21\165\323\114\115\61\205\123\122"
	"\116\51\205\324\122\57\105\44\321\111\25\131\124\22\105\46\145\244\321\106"
	"\34\165\344\321\107\40\301\24\222\110\43\221\164\321\104\55\261\204\121\112"
	"\56\251\204\322\112"

	"cp437\0"
	"\0\0"
	"\27\300\100\202\7\37\164\0\202\10\45\230\60\102\12\50\234\100\101\5"
	"\30\70\260\300\12\54\250\360\202\13\61\144\300\101\4\22\114\140\245\51"
	"\221\106\32\151\244\221\106\32\151\244\221\106\32\151\244\221\106\32\151\244"
	"\215\72\372\150\230\147\362\331\147\234\160\372\311\246\234"
	"\170\336\151\347\230\144\246\211\246\231\140\252\231\247\236"
	"\165\276\111\150\240\173\256\171\250\240\203\376\11\50\235\163\266\351\246\241"
	"\205\226\51\246\242\211\56\312\50\242\345\104\212\14\75\327\334\23\51\76"
	"\332\64\323\15\72\221\352\223\116\244\221\106\332\45\227\136\176\371\300\226"
	"\7\144\231\200\226\221\42\0\251\0"

	"cp850\0"
	"\0\0"
	"\27\300\100\202\7\37\164\0\202\10\45\230\60\102\12\50\234\100\101\5"
	"\30\70\260\300\12\54\250\360\202\13\61\144\300\1\4\22\64\300\200\51"
	"\221\106\32\151\244\221\106\32\151\244\221\106\32\151\244\221\106\32\151\244"
	"\215\72\372\150\230\147\106\32\151\244\5\370\311\246\234\170\106\60\301\230"
	"\144\246\211\246\231\140\252\31\151\244\165\276\111\150\240"
	"\173\256\171\150\244\221\106\32\151\244\221\176\21\151\244\221\226\51\246\242"
	"\211\106\32\51\242\221\106\32\151\244\221\106\32\151\244\221\106\32\151\244"
	"\221\106\152\100\244\221\106\112\144\244\221\16\360\200\2\7\20\220\100\244"
	"\221\42\0\251\0"
};

static const unsigned short legacy_chars[] = {
	0, 1, 160, 167, 168, 169, 175, 176, 178, 183, 184, 198, 215, 216, 230,
	247, 248, 162, 163, 165,
	196, 197, 198, 199, 201, 214, 215, 216, 220, 224, 226, 228, 229, 230,
	231, 232, 233, 234, 235,
	236, 238, 239, 242, 244, 246, 248, 249, 251, 252, 255, 256, 257, 258,
	259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279,
	280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 302, 303, 304, 305,
	308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323,
	324, 325, 326, 327, 328,
	330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 402,
	416, 417, 431, 432, 536,
	537, 538, 539, 710, 711, 728, 729, 731, 732, 733, 768, 769, 771, 777,
	803, 890, 900, 901, 902,
	904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113,
	1114, 1115, 1116, 1118, 1119, 1168, 1169, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463,
	1464, 1465, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1488,
	1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1520, 1521, 1522, 1523,
	1524, 1548, 1563,
	1567, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617,
	1618, 1657, 1662, 1670, 1672, 1681, 1688, 1705, 1711, 1722, 1726, 1729,
	1746, 3585, 3586,
	3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598,
	3599, 3600, 3601,
	3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613,
	3614, 3615, 3616,
	3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628,
	3629, 3630, 3631,
	3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3647,
	3648, 3649, 3650,
	3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662,
	3663, 3664, 3665,
	3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 7682, 7683,
	7690, 7691, 7710,
	7711, 7744, 7745, 7766, 7767, 7776, 7777, 7786, 7787, 7808, 7809, 7810,
	7811, 7812, 7813,
	7922, 7923, 8204, 8205, 8206, 8207, 8211, 8212, 8213, 8215, 8216, 8217,
	8218, 8220, 8221,
	8222, 8224, 8225, 8226, 8230, 8240, 8249, 8250, 8362, 8363, 8364, 8367,
	8359, 8470, 8482,
	8729, 8730, 8776, 8804, 8805, 8992, 8993, 9472, 9474, 9484, 9488, 9492,
	9496, 9500, 9508,
	9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560,
	9561, 9562, 9563,
	9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575,
	9576, 9577, 9578,
	9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632,
};

static int fuzzycmp(const unsigned char *a, const unsigned char *b)
{
	for (; *a && *b; a++, b++) {
		while (*a && (*a | 32U) - 'a' > 26 && *a - '0' > 10U) a++;
		if ((*a | 32U) != *b) return 1;
	}
	return *a != *b;
}

static size_t find_charmap(const void *name)
{
	const unsigned char *s;
	for (s = charmaps; *s;) {
		if (!fuzzycmp((const unsigned char *) name, s)) {
			for (; *s; s += strlen((char *) s) + 1);
			return s + 1 - charmaps;
		}
		s += strlen((char *) s) + 1;
		if (!*s) {
			if (s[1] > 0200) s += 2;
			else s += 2 + (128U - s[1]) / 4 * 5;
		}
	}
	return -1;
}

iconv_t iconv_open(const char *to, const char *from)
{
	size_t f, t;

	if ((t = find_charmap(to)) == -1
	    || (f = find_charmap(from)) == -1
	    || (charmaps[t] >= 0320)) {
		errno = EINVAL;
		return (iconv_t) -1;
	}

	return (void *) (f << 16 | t);
}

int iconv_close(iconv_t cd)
{
	return 0;
}

static unsigned get_32(const unsigned char *s, int e)
{
	e &= 3;
	return (s[e] + 0U) << 24 | s[e ^ 1] << 16 | s[e ^ 2] << 8 | s[e ^ 3];
}

static void put_32(unsigned char *s, unsigned c, int e)
{
	e &= 3;
	s[e ^ 0] = c >> 24;
	s[e ^ 1] = c >> 16;
	s[e ^ 2] = c >> 8;
	s[e ^ 3] = c;
}

size_t iconv(iconv_t cd0, char **__restrict in, size_t *__restrict inb,
             char **__restrict out, size_t *__restrict outb)
{
	size_t x = 0;
	unsigned long cd = (unsigned long) cd0;
	unsigned to = cd & 0xffff;
	unsigned from = cd >> 16;
	const unsigned char *map = charmaps + from + 1;
	const unsigned char *tomap = charmaps + to + 1;
	mbstate_t st = {0};
	wchar_t wc;
	unsigned c, d;
	size_t k, l;
	int err;
	unsigned char type = map[-1];
	unsigned char totype = tomap[-1];

	if (!in || !*in || !*inb) return 0;

	for (; *inb; *in += l, *inb -= l) {
		c = *(unsigned char *) *in;
		l = 1;

		if (c >= 128 || type - UTF_32BE < 7U)
			switch (type) {
				case UTF_8:
					l = mbrtowc(&wc, *in, *inb, &st);
					if (!l) l++;
					else if (l == (size_t) -1) goto ilseq;
					else if (l == (size_t) -2) goto starved;
					c = wc;
					break;
				case WCHAR_T:
					l = sizeof(wchar_t);
					if (*inb < l) goto starved;
				case UTF_32BE:
				case UTF_32LE:
					l = 4;
					if (*inb < 4) goto starved;
					c = get_32((const unsigned char *) *in, type);
					if (c - 0xd800u < 0x800u || c >= 0x110000u)
						goto ilseq;
					break;
				default:
					if (c < 128 + type) break;
					c -= 128 + type;
					c = legacy_chars[map[c * 5 / 4] >> 2 * c % 8 |
						(( map[c * 5 / 4 + 1] << (8 - 2 * c % 8)) & 1023 )];
					if (!c) c = *(unsigned char *) *in;
					if (c == 1) goto ilseq;
			}

		switch (totype) {
			case WCHAR_T:
				if (*outb < sizeof(wchar_t)) goto toobig;
				*(wchar_t *) *out = c;
				*out += sizeof(wchar_t);
				*outb -= sizeof(wchar_t);
				break;
			case UTF_8:
				if (*outb < 4) {
					char tmp[4];
					k = wcrtomb(tmp, c, NULL);
					if (*outb < k) goto toobig;
					memcpy(*out, tmp, k);
				} else k = wcrtomb(*out, c, NULL);
				*out += k;
				*outb -= k;
				break;
			case US_ASCII:
				if (c > 0x7f) subst : x++, c = '*';
			default:
				if (*outb < 1) goto toobig;
				if (c < 128 + totype) {
					revout:
					*(*out)++ = c;
					*outb -= 1;
					break;
				}
				d = c;
				for (c = 0; c < 128 - totype; c++) {
					if (d == legacy_chars[tomap[c * 5 / 4] >> 2 * c % 8 |
						(tomap[c * 5 / 4 + 1] << (8 - 2 * c % 8) & 1023)]) {
						c += 128;
						goto revout;
					}
				}
				goto subst;
			case UTF_32BE:
			case UTF_32LE:
				if (*outb < 4) goto toobig;
				put_32((unsigned char *) *out, c, totype);
				*out += 4;
				*outb -= 4;
				break;
		}
	}
	return x;
	ilseq:
	err = EILSEQ;
	x = -1;
	goto end;
	toobig:
	err = E2BIG;
	x = -1;
	goto end;
	starved:
	err = EINVAL;
	x = -1;
	end:
	errno = err;
	return x;
}
